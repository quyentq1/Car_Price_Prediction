name: Deploy Python App to Windows VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs:
      build-path: ${{ steps.set-output.outputs.build-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Clean previous builds
        run: |
          if (Test-Path "build") { Remove-Item -Recurse -Force build }
          if (Test-Path "*.pyc") { Remove-Item -Force *.pyc }
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_windows.txt
          pip install pywin32 waitress
      
      - name: Create build directory
        run: |
          New-Item -ItemType Directory -Force -Path build
      
      - name: Copy application files
        run: |
          # Copy main application files
          Copy-Item api.py build/
          Copy-Item best_model_RandomForestRegressor.pkl build/
          Copy-Item requirements_windows.txt build/
          Copy-Item app_win_service.py build/
          
          # Copy web.config if exists
          if (Test-Path "web.config") {
            Copy-Item web.config build/
          }
      
      - name: Create startup scripts
        run: |
          # Create startup batch file
          $startupScript = @'
          @echo off
          echo Starting Car Price Prediction API...
          cd /d "%~dp0"
          python -m waitress --host=0.0.0.0 --port=5000 api:app
          '@
          $startupScript | Out-File -FilePath build/start_app.bat -Encoding ascii
          
          # Create installation script
          $installScript = @'
          @echo off
          echo Installing Car Price Prediction API...
          
          REM Create logs directory
          if not exist "C:\logs" mkdir "C:\logs"
          
          REM Stop existing Python processes
          echo Stopping existing Python processes...
          taskkill /f /im python.exe /t >nul 2>&1
          
          REM Install/Update Python packages
          echo Installing Python packages...
          python -m pip install --upgrade pip
          pip install -r requirements_windows.txt
          pip install waitress pywin32
          
          REM Set permissions
          echo Setting permissions...
          icacls "C:\inetpub\wwwroot\CarPricePrediction" /grant "IIS_IUSRS:(OI)(CI)F" /T
          
          echo Installation completed!
          '@
          $installScript | Out-File -FilePath build/install.bat -Encoding ascii
          
          # Create service management script
          $serviceScript = @'
          @echo off
          set SERVICE_NAME=CarPricePredictionAPI
          
          if "%1"=="start" goto start
          if "%1"=="stop" goto stop
          if "%1"=="restart" goto restart
          
          echo Usage: service.bat [start|stop|restart]
          goto end
          
          :start
          echo Starting %SERVICE_NAME%...
          start /b python -m waitress --host=0.0.0.0 --port=5000 api:app
          echo Service started
          goto end
          
          :stop
          echo Stopping %SERVICE_NAME%...
          taskkill /f /im python.exe /t >nul 2>&1
          echo Service stopped
          goto end
          
          :restart
          call :stop
          timeout /t 5 /nobreak >nul
          call :start
          goto end
          
          :end
          '@
          $serviceScript | Out-File -FilePath build/service.bat -Encoding ascii
      
      - name: Set output path
        id: set-output
        run: echo "build-path=build" >> $env:GITHUB_OUTPUT
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-app-build
          path: build/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-app-build
          path: build
      
      - name: Display build contents
        run: |
          echo "Build contents:"
          ls -la build/
      
      - name: Copy files to VPS via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          source: "build/*"
          target: "C:/inetpub/wwwroot/CarPricePrediction/"
      
      - name: Deploy and restart application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          timeout: 120s
          command_timeout: 10m
          script: |
            echo "=== Starting deployment process ==="
            
            # Navigate to application directory
            cd "C:\inetpub\wwwroot\CarPricePrediction"
            
            # Run installation script
            echo "Running installation..."
            call install.bat
            
            # Stop existing service
            echo "Stopping existing application..."
            call service.bat stop
            
            # Wait a moment
            timeout /t 10 /nobreak >nul
            
            # Start application
            echo "Starting application..."
            call service.bat start
            
            # Restart IIS (if using IIS integration)
            echo "Restarting IIS..."
            iisreset
            
            echo "=== Deployment completed ==="
      
      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            echo "Waiting for application to start..."
            timeout /t 30 /nobreak >nul
            
            # Check if Python process is running
            echo "Checking Python processes..."
            tasklist | findstr python.exe
            
            # Try to ping the application
            echo "Testing application endpoint..."
            powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost:5000' -TimeoutSec 10 -UseBasicParsing; Write-Host 'Application Status:' $response.StatusCode } catch { Write-Host 'Application test failed:' $_.Exception.Message }"
            
            echo "Deployment verification completed"