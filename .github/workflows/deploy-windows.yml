name: Deploy to Windows VPS (WinRM)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_windows.txt
        pip install pywin32

    - name: Create deployment package
      run: |
        # Create package directory
        New-Item -ItemType Directory -Force -Path .\deploy
        
        # Copy required files
        Copy-Item api.py .\deploy\
        Copy-Item best_model_RandomForestRegressor.pkl .\deploy\
        Copy-Item web.config .\deploy\
        Copy-Item requirements_windows.txt .\deploy\
        Copy-Item app_win_service.py .\deploy\
        
        # Create startup script
        $startupScript = @'
        @echo off
        cd /d "%~dp0"
        python -m waitress --port=5000 api:app
        '@
        $startupScript | Out-File -FilePath .\deploy\start_web.bat -Encoding ascii

        # Create installation script
        $installScript = @'
        # Create necessary directories
        New-Item -ItemType Directory -Force -Path C:\logs
        
        # Install Python if not exists
        if (-not (Test-Path "C:\Python39\python.exe")) {
            Write-Host "Installing Python..."
            Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe" -OutFile "python-installer.exe"
            Start-Process -FilePath ".\python-installer.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
            Remove-Item "python-installer.exe"
        }
        
        # Install required packages
        & C:\Python39\python.exe -m pip install --upgrade pip
        & C:\Python39\python.exe -m pip install -r C:\inetpub\wwwroot\CarPricePrediction\requirements_windows.txt
        & C:\Python39\python.exe -m pip install waitress pywin32
        
        # Configure IIS
        Import-Module WebAdministration
        
        # Create or update the website
        $iisApp = Get-IISSite -Name "CarPricePrediction" -ErrorAction SilentlyContinue
        
        if (-not $iisApp) {
            New-IISSite -Name "CarPricePrediction" `
                       -PhysicalPath "C:\inetpub\wwwroot\CarPricePrediction" `
                       -BindingInformation "*:80:" `
                       -Force
        } else {
            Set-ItemProperty -Path "IIS:\Sites\CarPricePrediction" -Name physicalPath -Value "C:\inetpub\wwwroot\CarPricePrediction"
        }
        
        # Set permissions
        $acl = Get-Acl "C:\inetpub\wwwroot\CarPricePrediction"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS AppPool\DefaultAppPool", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
        $acl.SetAccessRule($accessRule)
        Set-Acl "C:\inetpub\wwwroot\CarPricePrediction" $acl
        
        # Restart IIS
        iisreset
        
        Write-Host "Installation completed successfully!"
        Write-Host "To start the application, run: start_web.bat"
        '@
        $installScript | Out-File -FilePath .\deploy\install.ps1 -Encoding ascii

    - name: Create deployment archive
      run: |
        Compress-Archive -Path .\deploy\* -DestinationPath deploy-package.zip -Force

    - name: Deploy to Windows VPS via WinRM
      shell: powershell
      run: |
        try {
          # Add VPS to TrustedHosts
          Write-Host "Configuring TrustedHosts for: ${{ secrets.VPS_HOST }}"
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "${{ secrets.VPS_HOST }}" -Force
          
          # Create secure credentials
          $securePassword = ConvertTo-SecureString "${{ secrets.VPS_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ("${{ secrets.VPS_USERNAME }}", $securePassword)
          
          Write-Host "Connecting to VPS: ${{ secrets.VPS_HOST }}"
          
          # Create PowerShell session with proper configuration
          $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
          $session = New-PSSession -ComputerName "${{ secrets.VPS_HOST }}" -Credential $credential -Port 5985 -UseSSL:$false -SessionOption $sessionOptions -Authentication Basic
          
          Write-Host "Session created successfully"
          
          # Create temp directory on remote machine
          Invoke-Command -Session $session -ScriptBlock {
            New-Item -ItemType Directory -Force -Path "C:\temp"
            New-Item -ItemType Directory -Force -Path "C:\inetpub\wwwroot\CarPricePrediction"
          }
          
          Write-Host "Copying deployment package..."
          # Copy deployment package
          Copy-Item -Path ".\deploy-package.zip" -Destination "C:\temp\deploy-package.zip" -ToSession $session -Force
          
          Write-Host "Extracting and installing on remote machine..."
          # Execute deployment on remote machine
          Invoke-Command -Session $session -ScriptBlock {
            try {
              # Stop any existing processes
              Get-Process | Where-Object {$_.ProcessName -eq "python"} | Stop-Process -Force -ErrorAction SilentlyContinue
              
              # Extract files
              Expand-Archive -Path "C:\temp\deploy-package.zip" -DestinationPath "C:\inetpub\wwwroot\CarPricePrediction\" -Force
              
              # Run installation script
              Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
              & "C:\inetpub\wwwroot\CarPricePrediction\install.ps1"
              
              # Start the web application
              Start-Process -FilePath "cmd.exe" -ArgumentList "/c C:\inetpub\wwwroot\CarPricePrediction\start_web.bat" -WindowStyle Hidden -WorkingDirectory "C:\inetpub\wwwroot\CarPricePrediction"
              
              Write-Host "Deployment completed successfully on remote machine"
            }
            catch {
              Write-Error "Error during remote deployment: $($_.Exception.Message)"
              throw
            }
          }
          
          Write-Host "Deployment completed successfully"
        }
        catch {
          Write-Error "Deployment failed: $($_.Exception.Message)"
          throw
        }
        finally {
          # Clean up session
          if ($session) {
            Remove-PSSession $session
          }
        }

    - name: Verify deployment
      shell: powershell
      run: |
        try {
          Start-Sleep -Seconds 30
          $response = Invoke-WebRequest -Uri "http://${{ secrets.VPS_HOST }}/" -TimeoutSec 30 -UseBasicParsing
          Write-Host "Application is running successfully. Status: $($response.StatusCode)"
        }
        catch {
          Write-Warning "Could not verify deployment: $($_.Exception.Message)"
        }