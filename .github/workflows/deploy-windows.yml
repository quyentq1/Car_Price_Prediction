name: Deploy to Windows VPS (FTP)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_windows.txt
        pip install pywin32

    - name: Create deployment package
      run: |
        # Create package directory
        New-Item -ItemType Directory -Force -Path .\deploy
        
        # Copy required files
        Copy-Item api.py .\deploy\
        Copy-Item best_model_RandomForestRegressor.pkl .\deploy\
        Copy-Item web.config .\deploy\
        Copy-Item requirements_windows.txt .\deploy\
        Copy-Item app_win_service.py .\deploy\
        
        # Create startup script
        $startupScript = @'
        @echo off
        cd /d "%~dp0"
        python -m waitress --port=5000 api:app
        '@
        $startupScript | Out-File -FilePath .\deploy\start_web.bat -Encoding ascii

        # Create installation script
        $installScript = @'
        # Create necessary directories
        New-Item -ItemType Directory -Force -Path C:\logs
        
        # Install Python if not exists
        if (-not (Test-Path "C:\Python39\python.exe")) {
            Write-Host "Installing Python..."
            Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.9.13/python-3.9.13-amd64.exe" -OutFile "python-installer.exe"
            Start-Process -FilePath ".\python-installer.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
            Remove-Item "python-installer.exe"
        }
        
        # Install required packages
        & C:\Python39\python.exe -m pip install --upgrade pip
        & C:\Python39\python.exe -m pip install -r C:\inetpub\wwwroot\CarPricePrediction\requirements_windows.txt
        & C:\Python39\python.exe -m pip install waitress pywin32
        
        # Configure IIS
        Import-Module WebAdministration
        
        # Create or update the website
        $iisApp = Get-IISSite -Name "CarPricePrediction" -ErrorAction SilentlyContinue
        
        if (-not $iisApp) {
            New-IISSite -Name "CarPricePrediction" `
                       -PhysicalPath "C:\inetpub\wwwroot\CarPricePrediction" `
                       -BindingInformation "*:80:" `
                       -Force
        } else {
            Set-ItemProperty -Path "IIS:\Sites\CarPricePrediction" -Name physicalPath -Value "C:\inetpub\wwwroot\CarPricePrediction"
        }
        
        # Set permissions
        $acl = Get-Acl "C:\inetpub\wwwroot\CarPricePrediction"
        $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS AppPool\DefaultAppPool", "FullControl", "ContainerInherit,ObjectInherit", "None", "Allow")
        $acl.SetAccessRule($accessRule)
        Set-Acl "C:\inetpub\wwwroot\CarPricePrediction" $acl
        
        # Restart IIS
        iisreset
        
        Write-Host "Installation completed successfully!"
        Write-Host "To start the application, run: start_web.bat"
        '@
        $installScript | Out-File -FilePath .\deploy\install.ps1 -Encoding ascii

        # Create remote execution script
        $remoteScript = @'
        # Stop existing processes
        Get-Process | Where-Object {$_.ProcessName -eq "python"} | Stop-Process -Force -ErrorAction SilentlyContinue
        
        # Run installation
        Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
        & "C:\inetpub\wwwroot\CarPricePrediction\install.ps1"
        
        # Start application
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c C:\inetpub\wwwroot\CarPricePrediction\start_web.bat" -WindowStyle Hidden -WorkingDirectory "C:\inetpub\wwwroot\CarPricePrediction"
        
        Write-Host "Application started successfully"
        '@
        $remoteScript | Out-File -FilePath .\deploy\deploy_remote.ps1 -Encoding ascii

    - name: Deploy via FTP
      run: |
        # FTP deployment script
        $ftpScript = @'
        $ftpServer = "${{ secrets.VPS_HOST }}"
        $ftpUsername = "${{ secrets.FTP_USERNAME }}"
        $ftpPassword = "${{ secrets.FTP_PASSWORD }}"
        $ftpPath = "/CarPricePrediction/"
        
        $files = Get-ChildItem -Path ".\deploy" -Recurse -File
        
        foreach ($file in $files) {
          try {
            $relativePath = $file.FullName.Replace((Get-Location).Path + "\deploy\", "").Replace("\", "/")
            $ftpUri = "ftp://$ftpServer$ftpPath$relativePath"
            
            Write-Host "Uploading: $relativePath"
            
            $ftprequest = [System.Net.FtpWebRequest]::Create($ftpUri)
            $ftprequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile
            $ftprequest.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $ftpPassword)
            $ftprequest.UseBinary = $true
            
            $fileContent = [System.IO.File]::ReadAllBytes($file.FullName)
            $ftprequest.ContentLength = $fileContent.Length
            
            $requestStream = $ftprequest.GetRequestStream()
            $requestStream.Write($fileContent, 0, $fileContent.Length)
            $requestStream.Close()
            
            $response = $ftprequest.GetResponse()
            Write-Host "Uploaded successfully: $($response.StatusDescription)"
            $response.Close()
          }
          catch {
            Write-Error "Failed to upload $relativePath : $($_.Exception.Message)"
          }
        }
        '@
        
        # Execute FTP script
        Invoke-Expression $ftpScript

    - name: Execute remote installation
      shell: powershell
      run: |
        try {
          # Create secure credentials for WinRM
          $securePassword = ConvertTo-SecureString "${{ secrets.VPS_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ("${{ secrets.VPS_USERNAME }}", $securePassword)
          
          # Create PowerShell session for remote execution
          $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
          $session = New-PSSession -ComputerName "${{ secrets.VPS_HOST }}" -Credential $credential -Port 5985 -UseSSL:$false -SessionOption $sessionOptions -ErrorAction Stop
          
          # Execute deployment script on remote machine
          Invoke-Command -Session $session -ScriptBlock {
            Set-Location -Path "C:\inetpub\wwwroot\CarPricePrediction"
            & ".\deploy_remote.ps1"
          }
          
          Write-Host "Remote deployment completed successfully"
        }
        catch {
          Write-Warning "Could not execute remote installation via WinRM: $($_.Exception.Message)"
          Write-Host "Please manually run deploy_remote.ps1 on the server"
        }
        finally {
          if ($session) {
            Remove-PSSession $session
          }
        }

    - name: Verify deployment
      run: |
        try {
          Start-Sleep -Seconds 30
          $response = Invoke-WebRequest -Uri "http://${{ secrets.VPS_HOST }}/" -TimeoutSec 30 -UseBasicParsing
          Write-Host "Application is running successfully. Status: $($response.StatusCode)"
        }
        catch {
          Write-Warning "Could not verify deployment: $($_.Exception.Message)"
          Write-Host "Please check the application manually"
        }